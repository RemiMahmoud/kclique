fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 3: example
library(kclique)
# Other packages needed
library(dplyr, warn.conflicts = FALSE)
library(igraph, warn.conflicts = FALSE)
# Chunk 4
data("data_example", package ="kclique")
knitr::kable(head(data_example))
# Chunk 5
# get graph from the data
graph_example <- get_graph_from_dat(data_example)
plot_graph_example <- plot_graph(G = graph_example, dat = data_example)
plot_graph_example
kcliques_example <- kclique::maximal_kclique_enumeration(graph_example, data_example)
knitr::kable(kcliques_example,col.names = "List of kcliques")
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example)
knitr::kable(tibble_kclique)
plot_kclique_1 <- plot_kclique(G = graph_example, dataset = data_example, tibble_kcliques = tibble_kclique, vector_kcliques = 1)
plot_kclique_1
plot_kclique_3 <- plot_kclique(G = graph_example, dataset = data_example, tibble_kcliques = tibble_kclique, vector_kcliques = 3)
plot_kclique_3
kclique::function_count_members_from_tibble(tibble_kclique)
kclique::function_count_members_from_tibble(tibble_kclique, columns_to_select = c(factor_B, factor_C))
kclique::function_count_members_from_tibble(tibble_kclique, columns_to_select = c("factor_B", "factor_C"))
?kclique::function_count_members_from_tibble
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
attachment::att_to_description()
devtools::document()
library(kclique)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 3: example
library(kclique)
# Other packages needed
library(dplyr, warn.conflicts = FALSE)
library(igraph, warn.conflicts = FALSE)
# Chunk 4
data("data_example", package ="kclique")
knitr::kable(head(data_example))
library(kclique)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 3: example
library(kclique)
# Other packages needed
library(dplyr, warn.conflicts = FALSE)
library(igraph, warn.conflicts = FALSE)
# Chunk 4
data("data_example", package ="kclique")
knitr::kable(head(data_example))
# Chunk 5
# get graph from the data
graph_example <- get_graph_from_dat(data_example)
# Chunk 6
plot_graph_example <- plot_graph(G = graph_example, dat = data_example)
plot_graph_example
kcliques_example <- kclique::maximal_kclique_enumeration(graph_example, data_example)
knitr::kable(kcliques_example,col.names = "List of kcliques")
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example)
knitr::kable(tibble_kclique)
plot_kclique_1 <- plot_kclique(G = graph_example, dataset = data_example, tibble_kcliques = tibble_kclique, vector_kcliques = 1)
plot_kclique_1
plot_kclique_3 <- plot_kclique(G = graph_example, dataset = data_example, tibble_kcliques = tibble_kclique, vector_kcliques = 3)
plot_kclique_3
plot_kclique_3 <- plot_kclique(G = graph_example, dataset = data_example, tibble_kcliques = tibble_kclique, vector_kcliques = 3, size_text = 0)
plot_kclique_3
devtools::build_readme()
kclique::data_example
kclique::data_example %>% as.data.frame()
?ggraph::geom_edge_link()
devtools::document()
attachment::att_to_description()
require(tidygraph)
gr <- create_notable('bull') %>%
mutate(class = sample(letters[1:3], n(), replace = TRUE)) %>%
activate(edges) %>%
mutate(class = sample(letters[1:3], n(), replace = TRUE))
ggraph(gr, 'stress') +
geom_edge_link0(aes(colour = class))
library(ggraph)
ggraph(gr, 'stress') +
geom_edge_link0(aes(colour = class))
ggraph(gr, 'stress') +
geom_edge_link0(aes(), colour = "blue")
plot_graph <- function(G, dat, layout_name = "in_circle", size_text = 3.5, color_text = "black", color_edges = "black"){
variable = NULL
nodes = NULL
name = NULL
tbl_graph <- G %>%
as_tbl_graph %>%
activate(nodes) %>%
mutate(variable = function_assign_node_to_partite(.N()$name, dat))
plot_G <- tbl_graph %>%
ggraph(layout = layout_name ) +
# ggraph(layout = 'manual',x = coords$x, y= coords$y, circular= FALSE ) +
geom_edge_link(colour = color_edges) +
geom_node_point(size = 10, aes(colour = variable)) +
geom_node_text(aes(label = name), colour = color_text, vjust = 0.4, size = size_text) +
theme(legend.position = "bottom")
# + xlim(c(-1.1,1.1))
return(plot_G)
}
devtools::document()
devtools::document()
attachment::att_to_description()
library(kclique)
devtools::build_readme()
devtools::build_readme()
library(kclique)
function_list_kcliques_to_tibble <- function(kcliques, dat,  arrange_by_n_members = TRUE, format = c("wide", "long")){
n <- NULL
tibble_output <-bind_rows(lapply(c(kcliques), function_detect_belonging, dat = dat ))
tibble_arranged <- function_count_members_from_tibble(tibble_output) %>%
arrange(desc(n)) %>%
select(-n)
# n_exp_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, "experiment_id") %>% pull(n) %>% max
# n_sp_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, "experiment_id") %>% pull(n) %>% max
#
# tibble_kclique_sp_mix_xp_id %>%
#   mutate(kclique_id = as.character(1:n()))%>%
#   separate(experiment_id, into = paste0("experiment_id",1:n_exp_max), sep = "-", fill = "right") %>%
#   pivot_longer(contains("experiment"), values_to = "experiment_id", values_drop_na = TRUE) %>%
#   select(-name) %>%
#   separate(species_mix, into = paste0("species_mix",1:n_sp_max), sep = "-", fill = "right" ) %>%
#   pivot_longer(contains("species_mix"), values_to = "species_mix", values_drop_na = TRUE) %>%
#   select(-name)
if(format =="long"){
factors <- colnames(dat)
number_factors <- length(factors)
tibble_arranged <- tibble_arranged %>%
mutate(kclique_id = as.character(1:n()))
for(i in 1:number_factors){
factor_name = factors[i]
n_factor_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, factor_name) %>%
pull(n) %>%
max
tibble_arranged <- tibble_arranged %>%
separate(factor_name, into = paste0(factor_name,1:n_exp_max), sep = "-", fill = "right") %>%
pivot_longer(contains(factor_name), values_to = factor_name, values_drop_na = TRUE) %>%
select(-name)
}
}
return(tibble_arranged)
}
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(kclique)
library(dplyr)
library(igraph)
library(tidygraph)
# Chunk 3
data("data_example", package ="kclique")
knitr::kable(head(data_example))
# Chunk 4
graph_example <- get_graph_from_dat(data_example)
# Chunk 5
plot_graph_example <- plot_graph(G = graph_example, dat = data_example)
plot_graph_example
# Chunk 6
kcliques_example <- kclique::maximal_kclique_enumeration(graph_example, data_example)
knitr::kable(kcliques_example)
function_list_kcliques_to_tibble
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example)
library(kclique)
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example)
library(kclique)
tibble_kclique <- kclique::function_list_kcliques_to_tibble(kcliques_example, data_example)
tibble_kclique
#' From a string containing the kcliques, detects to which set each node belongs
#'
#' @param string_input input a character vector containing members of the kcliques
#' @param dat a dataset with multiple columns, each column containing each factor composing the k sets of the G
#' @param sep separator between node names
#'
#' @importFrom stringr str_split str_remove
#' @importFrom tibble as_tibble
#' @importFrom dplyr mutate across everything
#'
function_detect_belonging <- function(string_input, dat, sep =";" ){
factors <- colnames(dat)
number_factors <- length(factors)
# data_output <- as.data.frame(matrix(character(0), nrow = 1, ncol = number_factors, dimnames = list(NULL ,factors)))
data_output <- as_tibble(matrix(character(0), nrow = 1, ncol = number_factors, dimnames = list(NULL ,factors)))
list_modalities_factor <- lapply(dat, unique)
string_input_splitted <- sort(stringr::str_split(string_input, pattern = sep)[[1]])
for(s in string_input_splitted){
ind_s <- which(sapply(list_modalities_factor, function(x) s %in% x))
data_output[1,ind_s] <- paste( s, data_output[,ind_s], sep = "-")
}
return(data_output %>% mutate(across(.cols = everything() , ~stringr::str_remove(.x, "-NA"))))
}
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example)
?match.arg()
function_list_kcliques_to_tibble <- function(kcliques, dat,  arrange_by_n_members = TRUE, format = c("wide", "long")){
format = format[1]
n <- NULL
tibble_output <-bind_rows(lapply(c(kcliques), function_detect_belonging, dat = dat ))
tibble_arranged <- function_count_members_from_tibble(tibble_output) %>%
arrange(desc(n)) %>%
select(-n)
# n_exp_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, "experiment_id") %>% pull(n) %>% max
# n_sp_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, "experiment_id") %>% pull(n) %>% max
#
# tibble_kclique_sp_mix_xp_id %>%
#   mutate(kclique_id = as.character(1:n()))%>%
#   separate(experiment_id, into = paste0("experiment_id",1:n_exp_max), sep = "-", fill = "right") %>%
#   pivot_longer(contains("experiment"), values_to = "experiment_id", values_drop_na = TRUE) %>%
#   select(-name) %>%
#   separate(species_mix, into = paste0("species_mix",1:n_sp_max), sep = "-", fill = "right" ) %>%
#   pivot_longer(contains("species_mix"), values_to = "species_mix", values_drop_na = TRUE) %>%
#   select(-name)
if(format =="long"){
factors <- colnames(dat)
number_factors <- length(factors)
tibble_arranged <- tibble_arranged %>%
mutate(kclique_id = as.character(1:n()))
for(i in 1:number_factors){
factor_name = factors[i]
n_factor_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, factor_name) %>%
pull(n) %>%
max
tibble_arranged <- tibble_arranged %>%
separate(factor_name, into = paste0(factor_name,1:n_exp_max), sep = "-", fill = "right") %>%
pivot_longer(contains(factor_name), values_to = factor_name, values_drop_na = TRUE) %>%
select(-name)
}
}
return(tibble_arranged)
}
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example)
tibble_kclique
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example, format ="long")
function_list_kcliques_to_tibble <- function(kcliques, dat,  arrange_by_n_members = TRUE, format = c("wide", "long")){
format = format[1]
n <- NULL
tibble_output <-bind_rows(lapply(c(kcliques), function_detect_belonging, dat = dat ))
tibble_arranged <- function_count_members_from_tibble(tibble_output) %>%
arrange(desc(n)) %>%
select(-n)
# n_exp_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, "experiment_id") %>% pull(n) %>% max
# n_sp_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, "experiment_id") %>% pull(n) %>% max
#
# tibble_kclique_sp_mix_xp_id %>%
#   mutate(kclique_id = as.character(1:n()))%>%
#   separate(experiment_id, into = paste0("experiment_id",1:n_exp_max), sep = "-", fill = "right") %>%
#   pivot_longer(contains("experiment"), values_to = "experiment_id", values_drop_na = TRUE) %>%
#   select(-name) %>%
#   separate(species_mix, into = paste0("species_mix",1:n_sp_max), sep = "-", fill = "right" ) %>%
#   pivot_longer(contains("species_mix"), values_to = "species_mix", values_drop_na = TRUE) %>%
#   select(-name)
if(format =="long"){
factors <- colnames(dat)
number_factors <- length(factors)
tibble_arranged <- tibble_arranged %>%
mutate(kclique_id = as.character(1:n()))
for(i in 1:number_factors){
factor_name = factors[i]
n_factor_max <- function_count_members_from_tibble(tibble_arranged, factor_name) %>%
pull(n) %>%
max
tibble_arranged <- tibble_arranged %>%
separate(factor_name, into = paste0(factor_name,1:n_exp_max), sep = "-", fill = "right") %>%
pivot_longer(contains(factor_name), values_to = factor_name, values_drop_na = TRUE) %>%
select(-name)
}
}
return(tibble_arranged)
}
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example, format ="long")
library(tidyr)
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example, format ="long")
function_list_kcliques_to_tibble <- function(kcliques, dat,  arrange_by_n_members = TRUE, format = c("wide", "long")){
format = format[1]
n <- NULL
tibble_output <-bind_rows(lapply(c(kcliques), function_detect_belonging, dat = dat ))
tibble_arranged <- function_count_members_from_tibble(tibble_output) %>%
arrange(desc(n)) %>%
select(-n)
# n_exp_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, "experiment_id") %>% pull(n) %>% max
# n_sp_max <- function_count_members_from_tibble(tibble_kclique_sp_mix_xp_id, "experiment_id") %>% pull(n) %>% max
#
# tibble_kclique_sp_mix_xp_id %>%
#   mutate(kclique_id = as.character(1:n()))%>%
#   separate(experiment_id, into = paste0("experiment_id",1:n_exp_max), sep = "-", fill = "right") %>%
#   pivot_longer(contains("experiment"), values_to = "experiment_id", values_drop_na = TRUE) %>%
#   select(-name) %>%
#   separate(species_mix, into = paste0("species_mix",1:n_sp_max), sep = "-", fill = "right" ) %>%
#   pivot_longer(contains("species_mix"), values_to = "species_mix", values_drop_na = TRUE) %>%
#   select(-name)
if(format =="long"){
factors <- colnames(dat)
number_factors <- length(factors)
tibble_arranged <- tibble_arranged %>%
mutate(kclique_id = as.character(1:n()))
for(i in 1:number_factors){
factor_name = factors[i]
n_factor_max <- function_count_members_from_tibble(tibble_arranged, factor_name) %>%
pull(n) %>%
max
tibble_arranged <- tibble_arranged %>%
separate(factor_name, into = paste0(factor_name,1:n_factor_max), sep = "-", fill = "right") %>%
pivot_longer(contains(factor_name), values_to = factor_name, values_drop_na = TRUE) %>%
select(-name)
}
}
return(tibble_arranged)
}
tibble_kclique <- function_list_kcliques_to_tibble(kcliques_example, data_example, format ="long")
tibble_kclique
get_graph_from_dat(data_example)
get_graph_from_dat(data_example %>% mutate(numeric_factor = rnorm(n())))
dat = data_example
# Get features related to the factors
factors <- colnames(dat)
dat = data_example %>% mutate(numeric_factor = sample(c(1:4), n()))
dat = data_example %>% mutate(numeric_factor = sample(c(1:4), n(), replace= TRUE))
dat
dat = data_example %>% mutate(numeric_factor = sample(rnorm(4), n(), replace= TRUE))
dat
# Get features related to the factors
factors <- colnames(dat)
number_factors <- length(factors)
number_modalities_factors <- apply(dat, 2,function(x){length(unique(x))})
number_modalities_factors
# Pre-allocate the space for the adjacency matrix as output
nrow_adjacency_matrix_all <- sum(number_modalities_factors)
rownames_adjacency_matrix <- rep(NA_character_, nrow_adjacency_matrix_all)
ind_tab <- c(0,cumsum(number_modalities_factors[1:number_factors]))
rownames_adjacency_matrix
nrow_adjacency_matrix_all
ind_tab <- c(0,cumsum(number_modalities_factors[1:number_factors]))
ind_tab
for(i in 1:number_factors){
rownames_adjacency_matrix[(1+ind_tab[i]):(ind_tab[i+1] )] <- unique(dat[[i]])
}
rownames_adjacency_matrix
adj_matrix_all <-  matrix(0, nrow = sum(number_modalities_factors),
ncol = sum(number_modalities_factors),
dimnames = list(rownames_adjacency_matrix,
rownames_adjacency_matrix))
#all pairs of factors
combn_factors <- combn(1:number_factors,2)
for(d in 1:ncol(combn_factors)){
ind_columns <- combn_factors[,d]
names_adj_matrix <- c(unique(dat[[ind_columns[1]]]),unique(dat[[ind_columns[2]]]))
# create the adjacency matrix related to the subgraph made of the two current factors
adj_matrix <- dat %>%
select(source = ind_columns[1], target = ind_columns[2])%>%
distinct  %>%
as.matrix %>%
graph.edgelist(directed = F) %>%
get.adjacency() %>%
as.matrix
adj_matrix <- adj_matrix[names_adj_matrix,names_adj_matrix] # Reorder rows and col to put them in right order
# Put the sub-adjacency_matrix into the big one
adj_matrix_all[names_adj_matrix, names_adj_matrix] <- adj_matrix
}
ind_columns <- combn_factors[,d]
names_adj_matrix <- c(unique(dat[[ind_columns[1]]]),unique(dat[[ind_columns[2]]]))
# create the adjacency matrix related to the subgraph made of the two current factors
adj_matrix <- dat %>%
select(source = ind_columns[1], target = ind_columns[2])%>%
distinct  %>%
as.matrix %>%
graph.edgelist(directed = F) %>%
get.adjacency() %>%
as.matrix
adj_matrix <- adj_matrix[names_adj_matrix,names_adj_matrix] # Reorder rows and col to put them in right order
names_adj_matrix
names_adj_matrix
adj_matrix
adj_matrix <- adj_matrix[names_adj_matrix,names_adj_matrix] # Reorder rows and col to put them in right order
ind_columns
dat[[ind_columns[1]]]
dat[[ind_columns[2]]]
dat
as.character(dat)
apply(dat, 2, as.character)
dat %>% mutate(across(everything(), as.character()))
dat %>% mutate(across(everything(), as.character)
dat %>% mutate(across(everything(), as.character)=
dat %>% mutate(across(everything(), as.character))
# Get features related to the factors
dat <- dat %>% mutate(across(everything(), as.character))
factors <- colnames(dat)
number_factors <- length(factors)
number_modalities_factors <- apply(dat, 2,function(x){length(unique(x))})
# Pre-allocate the space for the adjacency matrix as output
nrow_adjacency_matrix_all <- sum(number_modalities_factors)
rownames_adjacency_matrix <- rep(NA_character_, nrow_adjacency_matrix_all)
ind_tab <- c(0,cumsum(number_modalities_factors[1:number_factors]))
for(i in 1:number_factors){
rownames_adjacency_matrix[(1+ind_tab[i]):(ind_tab[i+1] )] <- unique(dat[[i]])
}
adj_matrix_all <-  matrix(0, nrow = sum(number_modalities_factors),
ncol = sum(number_modalities_factors),
dimnames = list(rownames_adjacency_matrix,
rownames_adjacency_matrix))
#all pairs of factors
combn_factors <- combn(1:number_factors,2)
for(d in 1:ncol(combn_factors)){
ind_columns <- combn_factors[,d]
names_adj_matrix <- c(unique(dat[[ind_columns[1]]]),unique(dat[[ind_columns[2]]]))
# create the adjacency matrix related to the subgraph made of the two current factors
adj_matrix <- dat %>%
select(source = ind_columns[1], target = ind_columns[2])%>%
distinct  %>%
as.matrix %>%
graph.edgelist(directed = F) %>%
get.adjacency() %>%
as.matrix
adj_matrix <- adj_matrix[names_adj_matrix,names_adj_matrix] # Reorder rows and col to put them in right order
# Put the sub-adjacency_matrix into the big one
adj_matrix_all[names_adj_matrix, names_adj_matrix] <- adj_matrix
}
type(dat)
typeof(dat)
any(is.numeric(dat))
dat = data_example %>% mutate(numeric_factor = sample(rnorm(4), n(), replace= TRUE))
any(is.numeric(dat))
dat
apply(dat, 2, is.numeric)
apply(dat, 2, function(x) any(is.numeric(x)))
is.numeric(dat$numeric_factor)
apply(dat, 2, is.numeric)
apply(dat, 2, is.list)
apply(dat, 2, is.double)
sapply(dat, class)
sapply(dat, class) %>% is.numeric
sapply(dat, class) %>% as.vector()
sapply(dat, class) %>% as.vector(mode = "any")
sapply(dat, class) %>% {. == "numeric"}
sapply(dat, class) %>% {. == "numeric"} %>% {.[4]}
sapply(dat, class) %>% {. == "numeric"} %>% {.[4]} %>% print()
sapply(dat, class) %>% {. == "numeric"} %>% {.[4]} %>%names
paste(names(type_columns)[index_numeric], sep = " and ")
type_columns <- sapply(dat, class)
index_numeric <- which(type_columns == "numeric")
index_numeric
paste(names(type_columns)[index_numeric], sep = " and ")
if(any(type_columns == "numeric")){
index_numeric <- which(type_columns == "numeric")
warning(paste0("Type of column ", paste(names(type_columns)[index_numeric], sep = " and "), "is numeric, converting it/them to characters"))
dat <- dat %>% mutate(across(everything(), as.character))
}
dat
dat = data_example %>% mutate(numeric_factor = sample(rnorm(4), n(), replace= TRUE), numericfactor2 = sample(rnorm(4), n(), replace= TRUE))
type_columns <- sapply(dat, class)
type_columns
if(any(type_columns == "numeric")){
index_numeric <- which(type_columns == "numeric")
warning(paste0("Type of column ", paste(names(type_columns)[index_numeric], sep = " and "), "is numeric, converting it/them to characters"))
dat <- dat %>% mutate(across(everything(), as.character))
}
index_numeric
names(type_columns)[index_numeric]
paste(names(type_columns)[index_numeric], sep = " and ")
paste(names(type_columns)[index_numeric], collapse = " and ")
if(any(type_columns == "numeric")){
index_numeric <- which(type_columns == "numeric")
warning(paste0("Type of column ", paste(names(type_columns)[index_numeric], collapse = " and "), " is numeric, converting it/them to characters"))
dat <- dat %>% mutate(across(everything(), as.character))
}
type_columns <- sapply(dat, class)
if(any(type_columns == "numeric")){
index_numeric <- which(type_columns == "numeric")
if(length(index_numeric)== 1){
warning(paste0("Type of column ", paste(names(type_columns)[index_numeric], collapse = " and "), " is numeric, converting it to character"))
} else {
warning(paste0("Types of columns ", paste(names(type_columns)[index_numeric], collapse = " and "), " are numeric, converting them to characters"))
}
dat <- dat %>% mutate(across(everything(), as.character))
}
dat = data_example %>% mutate(numeric_factor = sample(rnorm(4), n(), replace= TRUE), numericfactor2 = sample(rnorm(4), n(), replace= TRUE))
type_columns <- sapply(dat, class)
if(any(type_columns == "numeric")){
index_numeric <- which(type_columns == "numeric")
if(length(index_numeric)== 1){
warning(paste0("Type of column ", paste(names(type_columns)[index_numeric], collapse = " and "), " is numeric, converting it to character"))
} else {
warning(paste0("Types of columns ", paste(names(type_columns)[index_numeric], collapse = " and "), " are numeric, converting them to characters"))
}
dat <- dat %>% mutate(across(everything(), as.character))
}
usethis::use_readme_md()
usethis::use_readme_rmd()
devtools::build_readme()
usethis::use_vignette("How-to-use-kclique")
attachment::att_to_description()
rm(list = c("function_detect_belonging", "function_list_kcliques_to_tibble"))
attachment::att_to_description()
devtools::build_readme()
devtools::build_readme()
